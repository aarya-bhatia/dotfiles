# NOTE
# :  read (default)  builtin/custom command
# $  shell           shell command
# %  shell-pipe      shell command running with the ui
# !  shell-wait      shell command waiting for key press
# &  shell-async     shell command running asynchronously

# set previewer /home/aarya/.config/lf/preview.sh
# map i $/home/aarya/.config/lf/preview.sh $f | less -R

#set icons
set drawbox true
set ignorecase true
set incsearch true
set sortby atime
set info size:atime

# interpreter for shell commands
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# show the result of execution of previous commands
map ` !true

map x !{{
	read -p "$f " args
	$f $args
}}

map <enter> !{{
if which mimeopen; then
	mimeopen "$f"
else
	open "$f"
fi
}}

map <Shift><enter> $mimeopen --ask $f

# source '~/.config/lf/opener'

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
case $(file --mime-type -Lb $f) in
	text/html) firefox $fx;;
	text/*) lf -remote "send $id vim \$fx";;
	application/json ) nvim $fx;;
	application/pdf ) zathura $fx;;
	image/gif) nsxiv -a $fx;;
	image/*) nsxiv $fx;;
	audio/*) mpv $fx;;
	video/*) smplayer $fx;;
	*) for f in $fx; do setsid $OPENER $f &>/dev/null & done;;
esac
}}

cmd trash !python3 ~/.config/lf/scripts/trash.py

map <delete> trash
map D trash

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
set -f
case $f in
	*.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
	*.tar.gz|*.tgz) tar xzvf $f;;
	*.tar.xz|*.txz) tar xJvf $f;;
	*.zip) unzip $f;;
	*.rar) unrar x $f;;
	*.7z) 7z x $f;;
esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
set -f
mkdir $1
cp -r $fx $1
tar czf $1.tar.gz $1
rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
set -f
mkdir $1
cp -r $fx $1
zip -r $1.zip $1
rm -rf $1
}}

map gc cd ~/.config
map gd cd ~/Downloads
map gh cd ~
map gl cd ~/.config/lf
map gr cd ~/repos
map gs cd ~/scripts

# Fuzzy finder
cmd fzf_jump ${{
res="$(fzf)"
if [ -n "$res" ]; then
	if [ -d "$res" ]; then
		cmd="cd"
	else
		cmd="select"
	fi
	res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id $cmd \"$res\""
fi
}}

map <c-f> :fzf_jump

map o %{{
printf "create file: "
read ans
if touch $ans; then
	lf -remote "send $id select $ans"
fi
}}

map O %{{
printf "create dir: "
read ans
if mkdir -p $ans; then
	lf -remote "send $id select $ans"
fi
}}

# To rename selected files in editor
map R !printf "%s\n" $fx | bulkrename.py

# Edit and reload config
cmd edit-config ${{
$EDITOR ~/.config/lf/lfrc
lf -remote "send $id source ~/.config/lf/lfrc"
}}

map C edit-config

cmd change_layout %{{
if [ $lf_width -le 80 ]; then
	lf -remote "send $id set nopreview; set ratios 1"
elif [ $lf_width -le 160 ]; then
	lf -remote "send $id set ratios 1:2:3; set preview"
else
	lf -remote "send $id set ratios 1:2:3:5; set preview"
fi
}}

map zz change_layout

map z1 :set nopreview; set ratios 1
map z2 :set ratios 1:2; set preview
map z3 :set ratios 1:2:3; set preview
map z4 :set ratios 1:2:3:5; set preview

map A push :rename<enter><c-e>
map I push :rename<enter><c-a>

map Y %realpath $f | xsel -b && echo "Copied file path: $(xsel -b -o)"

map T $tmux new-session "/bin/bash -c 'cd $PWD' && /bin/bash"

cmd mvlink !{{
	read -p "Enter new directory: " newdir
    directory=$(realpath "$newdir") 
    
    if [ ! -d "$directory" ]; then
        echo Error: "$directory" is not a valid directory.
        exit 1
    fi

 	for file in $fx; do
 		printf "Move and Link '$file' to '$directory'? [y/n] "
 		read ans
 		if [ "$ans" = 'y' ]; then
 		    mv "$file" "$directory"     	
            ln -s "$directory/$(basename $file)" "$file"
 		fi
    done
}}

